import nextflow.plugins.NextflowPlugin

plugins {
    id "java"
    id "groovy"
    id "idea"
    id 'org.asciidoctor.jvm.convert'
    id 'maven-publish'
    id 'org.jreleaser' version '1.9.0'
}
apply plugin: NextflowPlugin

repositories {
    mavenCentral()
}

configurations {
    // see https://docs.gradle.org/4.1/userguide/dependency_management.html#sub:exclude_transitive_dependencies
    runtimeClasspath.exclude group: 'org.slf4j', module: 'slf4j-api'
}

apply from:'nf-plugin.gradle'

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    compileOnly "io.nextflow:nextflow:$nextflowPlugin.nextflowVersion"
    compileOnly 'org.slf4j:slf4j-api:1.7.10'
    compileOnly 'org.pf4j:pf4j:3.4.1'

    // test plugin
    testImplementation "io.nextflow:nextflow:$nextflowPlugin.nextflowVersion"
    testImplementation ("org.spockframework:spock-core:2.2-groovy-3.0") { exclude group: 'org.codehaus.groovy'; exclude group: 'net.bytebuddy' }
    testImplementation ('org.spockframework:spock-junit4:2.2-groovy-3.0') { exclude group: 'org.codehaus.groovy'; exclude group: 'net.bytebuddy' }

    testImplementation(testFixtures("io.nextflow:nextflow:$nextflowPlugin.nextflowVersion"))
    testImplementation(testFixtures("io.nextflow:nf-commons:$nextflowPlugin.nextflowVersion"))
}

// use JUnit 5 platform
test {
    useJUnitPlatform()
}

// package
jar {
    manifest {
        attributes(
                'Manifest-Version':'1.0',
                'Plugin-Id': project.name,
                'Plugin-Version': archiveVersion,
                'Plugin-Class': nextflowPlugin.pluginClassName,
                'Plugin-Provider': 'Your organization',
                'Plugin-Requires': '>=22.10.0',
        )
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}


jreleaser {
    project {
        authors = [publish_developer]
        license = 'Apache-2.0'
        links {
            homepage = publish_url
        }
        inceptionYear = publish_year
        description publish_description
    }

    distributions {
        app {
            active = 'ALWAYS'
            artifact {
                path = 'build/plugin/{{projectName}}-{{projectVersion}}.zip'
            }
            artifact {
                path = 'build/plugin/{{projectName}}-{{projectVersion}}-meta.json'
            }
        }
    }

    release {
        github {
            enabled = true
            repoOwner = publish_repoOwner
            overwrite = true
            changelog{
                formatted "ALWAYS"
                contributors {
                    format = '- {{contributorName}}{{#contributorUsernameAsLink}} ({{.}}){{/contributorUsernameAsLink}}'
                }
            }
            token = System.properties['JRELEASER_GITHUB_TOKEN'] ?: findProperty('JRELEASER_GITHUB_TOKEN')
        }
    }

}